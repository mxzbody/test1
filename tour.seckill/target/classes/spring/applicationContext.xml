<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!-- 包扫描 -->
	<context:component-scan base-package="com.tour"></context:component-scan>
	<!-- 引入外部配置文件 -->
	<!-- <context:property-placeholder  location="classpath:/mybatis/properites/jdbc.properties"/> -->
	<!--  <util:properties id="" location=""></util:properties> --> 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="Locations">
	<list >
	<value>classpath:/properites/jdbc.properties</value>
	<value>classpath:/properites/redis.properties</value>
	<value>classpath:/properites/httpclient.properties</value>
	<value>classpath:/properites/solr.properties</value>
	</list>
	</property>
	</bean>
	<bean id="dataSource" 
	class="com.alibaba.druid.pool.DruidDataSource">
	<property name="DriverClassName" value="${jdbc.driver}"></property>
	<property name="Password" value="${jdbc.password}"></property>
	<property name="Username" value="${jdbc.username}"></property>
	<property name="Url" value="${jdbc.url}"></property>
	</bean>
	
	<!-- AOP技术实现事物控制
	在原有的方式基础上，对方法进行扩展 
	通知：@Before ,@After ,@AfterThrowing,@AfterReturning
	作用：记录程序执行的过程
	@Around可以改变程序的执行状态
	通知的用途：
	    对我们的业务逻辑进行拓展
	    
	切入点：
	  只有满足切入点表达式的方法才能执行我们的通知
	-->
	<!-- 开启事物注解 -->
	<!-- <tx:annotation-driven/> -->
	<!-- 配置声明式事物处理 
	1.配置事物管理器
	2.配置事务的通知,定义事务的策略
	propagation="REQUIRED",表示当前操作必须添加事务
	propagation="SUPPORTS",表示事务支持
	propagation="NEVER",表示从不添加事物
	propagation="REQUIRES_NEW",每次方法的执行，都会新建一个事物
	2.1spring默认的事务策略
		规则：
			如果spring遇到运行时异常则默认回滚事务
			如果spring遇到检查异常/编译异常,事物默认不回滚(sql异常，IO异常，自定义异常throw)
	rollback-for="",指定异常回滚事务
	no-rollback-for="",指定异常不回滚
	read-only="true",数据库操作只读
	总结：
	如果程序中需要处理处理异常，则需要考虑事务的回滚特性
	，一般将检查异常转化为运行时异常 throw new RunTimeException
	3.配置事务的切面
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<tx:attributes>
	<tx:method name="save*" propagation="REQUIRED"/>
	<tx:method name="delete*" propagation="REQUIRED"/>
	<tx:method name="update*" propagation="REQUIRED"/>
	<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
	<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
	</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务的切面
	3.1 within表达式,粗粒度
		语法：within(包名.类名)
	3.2 execution
		语法:execution(返回值类型 包名.类名.方法名(参数列表)
		例子：
			execution(* com.jt.manager.service.*.*(..))
	 -->
	<aop:config>
	<!-- 配置通知 -->
	<aop:pointcut expression="execution(* com.tour.seckill.service.*.*(..))" id="pc"/>
	<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
</beans>