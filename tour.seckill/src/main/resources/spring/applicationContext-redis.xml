<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!-- <bean id="jedis" class="redis.clients.jedis.Jedis">
	<constructor-arg name="host" value="${redis.host}"></constructor-arg>
	<constructor-arg name="port" value="${redis.port}"></constructor-arg>
	</bean> -->
<!-- 	<bean id="infob" class="redis.clients.jedis.JedisShardInfo">
	<constructor-arg name="host" value="${redis.host}"></constructor-arg>
	<constructor-arg name="port" value="${redis.port.b}"></constructor-arg>
	</bean>
	<bean id="infoa" class="redis.clients.jedis.JedisShardInfo">
	<constructor-arg name="host" value="${redis.host}"></constructor-arg>
	<constructor-arg name="port" value="${redis.port.a}"></constructor-arg>
	</bean>
	<bean id="infoc" class="redis.clients.jedis.JedisShardInfo">
	<constructor-arg name="host" value="${redis.host}"></constructor-arg>
	<constructor-arg name="port" value="${redis.port.c}"></constructor-arg>
	</bean>
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
	<constructor-arg name="poolConfig" ref="JedisPoolConfig"></constructor-arg>
	<constructor-arg name="shards">
	<list>
	<ref bean="infoa"/>
	<ref bean="infob"/>
	<ref bean="infoc"/>
	</list>
	</constructor-arg>
	</bean> -->
	<!-- 实现哨兵配置 -->
	<!-- <bean id="sentinelPool" class="redis.clients.jedis.JedisSentinelPool">
	<constructor-arg name="masterName" value="${redis.sentinel.masterName}"></constructor-arg>
	<constructor-arg name="sentinels" >
	<set>
	<value >${redis.sentinel.a}</value>
	<value >${redis.sentinel.b}</value>
	<value >${redis.sentinel.c}</value>
	</set>
	</constructor-arg>
	</bean> -->
	<!-- 实现集群搭建 -->
<!-- 	<bean id="cluster" class="redis.clients.jedis.JedisCluster">
	<constructor-arg name="poolConfig" ref="JedisPoolConfig"></constructor-arg>
	<constructor-arg name="nodes">
	<set>
	<ref />
	</set>
	</constructor-arg>
	</bean>
	<bean id ="" class="redis.clients.jedis.HostAndPort">
	<constructor-arg ></constructor-arg>
	</bean> -->
	<!-- <bean id="JedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	<property name="maxIdle" value="${redis.maxIdle}"></property>
	<property name="maxTotal" value="${redis.maxTotal}"></property>
	</bean> -->
	
	 <!-- jedis 配置-->  
      <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >  
        <!-- 最大空闲数   -->
         <property name="maxIdle" value="${redis.maxIdle}" />   
        <!-- 最大建立连接等待时间 -->  
         <property name="maxWaitMillis" value="${redis.maxWait}" />   
        <!-- 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个   -->
         <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
        <property name="maxTotal" value="${redis.maxTotal}" />  
        <property name="minIdle" value="${redis.minIdle}" />  
    </bean> 
    
    <bean id="jedisCluster"  class="com.jt.common.factory.JedisClusterFactory" >  
        <property name="resource">
            <value>classpath:/properites/redis.properties</value>  
        </property>  
        <property name="keyPrefix" value="redis.cluster" />    <!-- 属性文件里  key的前缀 -->  
      <!--    <property name="timeout" value="${redis.timeout}" />  
      <property name="maxRedirections" value="6" />   -->
        <property name="poolConfig" ref="poolConfig" />  
    </bean>  
    
     <!--[redis-JedisPoolConfig配置](http://blog.csdn.net/liang_love_java/article/details/50510753)-->
<!--    jedis-2.7.2.jar 依赖jar包 commons-pool2-2.3.jar 
        jedis基于 commons-pool2-2.3.jar 自己实现了一个资源池。
        配置参数 详见 http://blog.csdn.net/liang_love_java/article/details/50510753
-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
        <property name="maxIdle" value="8" /> 
        <property name="maxTotal" value="200" /> 
        <property name="blockWhenExhausted" value="true" /> 
        <property name="maxWaitMillis" value="30000" /> 
        <property name="testOnBorrow" value="true" />  
    </bean>
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> 
        <property name="hostName" value="192.168.229.140" /> 
        <property name="port" value="6379"/> 
        <property name="poolConfig" ref="jedisPoolConfig" /> 
        <property name="usePool" value="true"/> 
    </bean> 

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">   
        <property name="connectionFactory"   ref="jedisConnectionFactory" />   
        <property name="keySerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>      
        <property name="valueSerializer">   
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />   
        </property>   
        <property name="hashKeySerializer">     
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property>   
        <property name="hashValueSerializer">   
           <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>     
        </property> 
     </bean>    
</beans>